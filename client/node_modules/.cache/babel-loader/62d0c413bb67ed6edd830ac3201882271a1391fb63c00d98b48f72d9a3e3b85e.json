{"ast":null,"code":"var _jsxFileName = \"/Users/mauriciolopez/Cargapp/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ChargersList from './ChargersList';\nimport SessionsList from './SessionsList';\nimport ChargerStatusCards from './ChargerStatusCards';\nimport ChargerConnectorsView from './ChargerConnectorsView';\nimport ClearDatabasePage from './ClearDatabasePage';\nimport './index.css';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport ConnectorStatusCards from './ConnectorStatusCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nfunction App() {\n  _s();\n  const [chargers, setChargers] = useState([]);\n  const [sessions, setSessions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [filterStatus, setFilterStatus] = useState(null);\n  const [selectedCharger, setSelectedCharger] = useState(null);\n  const [selectedConnectorId, setSelectedConnectorId] = useState(null);\n  const [stats, setStats] = useState({\n    total_sessions: 0,\n    total_minutes: 0\n  });\n  const fetchChargers = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(`${API_URL}/api/chargers`);\n      const data = await res.json();\n      setChargers(data.chargers || []);\n      setError(null);\n    } catch (err) {\n      setError('Error al obtener los cargadores');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Nuevo: fetch de todas las sesiones para el home\n  const fetchAllSessions = async () => {\n    try {\n      const res = await fetch(`${API_URL}/api/sessions`);\n      if (!res.ok) throw new Error('Respuesta no OK');\n      const contentType = res.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('Respuesta no es JSON');\n      }\n      const data = await res.json();\n      setSessions(Array.isArray(data) ? data : data.sessions || []);\n    } catch (err) {\n      // No interrumpe el loading general\n      console.error('Error al obtener todas las sesiones', err);\n    }\n  };\n  useEffect(() => {\n    let interval;\n    fetchChargers();\n    fetchAllSessions();\n    const fetchStats = async () => {\n      try {\n        const res = await fetch(`${API_URL}/api/sessions/stats`);\n        const data = await res.json();\n        setStats({\n          total_sessions: data.total_sessions || 0,\n          total_minutes: data.total_minutes || 0\n        });\n      } catch (err) {\n        setStats({\n          total_sessions: 0,\n          total_minutes: 0\n        });\n      }\n    };\n    fetchStats();\n    interval = setInterval(() => {\n      fetchChargers();\n      fetchAllSessions();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Obtener sesiones filtradas por chargerName y connectorId\n  const fetchSessions = async (chargerName, connectorId) => {\n    setLoading(true);\n    try {\n      let url = `${API_URL}/api/sessions`;\n      const params = [];\n      if (chargerName) params.push(`chargerName=${encodeURIComponent(chargerName)}`);\n      if (connectorId) params.push(`connectorId=${encodeURIComponent(connectorId)}`);\n      if (params.length > 0) url += `?${params.join('&')}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      setSessions(data.sessions || []);\n      setError(null);\n    } catch (err) {\n      setError('Error al obtener las sesiones');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Cuando se selecciona un conector, obtener el historial real filtrado\n  useEffect(() => {\n    if (selectedConnectorId && selectedCharger) {\n      fetchSessions(selectedCharger.name, selectedConnectorId);\n    }\n  }, [selectedConnectorId, selectedCharger]);\n  useEffect(() => {\n    if (sessions.length > 0) {\n      console.log('Ejemplo de sesión:', sessions[0]);\n    }\n  }, [sessions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50 p-6\",\n    children: /*#__PURE__*/_jsxDEV(ConnectorStatusCards, {\n      chargers: chargers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KcJ4y86i+UKyKvsBdu/KjBaj3kw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ChargersList","SessionsList","ChargerStatusCards","ChargerConnectorsView","ClearDatabasePage","BrowserRouter","Router","Route","Routes","ConnectorStatusCards","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","App","_s","chargers","setChargers","sessions","setSessions","loading","setLoading","error","setError","filterStatus","setFilterStatus","selectedCharger","setSelectedCharger","selectedConnectorId","setSelectedConnectorId","stats","setStats","total_sessions","total_minutes","fetchChargers","res","fetch","data","json","err","fetchAllSessions","ok","Error","contentType","headers","get","includes","Array","isArray","console","interval","fetchStats","setInterval","clearInterval","fetchSessions","chargerName","connectorId","url","params","push","encodeURIComponent","length","join","name","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mauriciolopez/Cargapp/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ChargersList from './ChargersList';\nimport SessionsList from './SessionsList';\nimport ChargerStatusCards from './ChargerStatusCards';\nimport ChargerConnectorsView from './ChargerConnectorsView';\nimport ClearDatabasePage from './ClearDatabasePage';\nimport './index.css';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport ConnectorStatusCards from './ConnectorStatusCards';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nfunction App() {\n  const [chargers, setChargers] = useState([]);\n  const [sessions, setSessions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [filterStatus, setFilterStatus] = useState(null);\n  const [selectedCharger, setSelectedCharger] = useState(null);\n  const [selectedConnectorId, setSelectedConnectorId] = useState(null);\n  const [stats, setStats] = useState({ total_sessions: 0, total_minutes: 0 });\n\n  const fetchChargers = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(`${API_URL}/api/chargers`);\n      const data = await res.json();\n      setChargers(data.chargers || []);\n      setError(null);\n    } catch (err) {\n      setError('Error al obtener los cargadores');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Nuevo: fetch de todas las sesiones para el home\n  const fetchAllSessions = async () => {\n    try {\n      const res = await fetch(`${API_URL}/api/sessions`);\n      if (!res.ok) throw new Error('Respuesta no OK');\n      const contentType = res.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('Respuesta no es JSON');\n      }\n      const data = await res.json();\n      setSessions(Array.isArray(data) ? data : (data.sessions || []));\n    } catch (err) {\n      // No interrumpe el loading general\n      console.error('Error al obtener todas las sesiones', err);\n    }\n  };\n\n  useEffect(() => {\n    let interval;\n    fetchChargers();\n    fetchAllSessions();\n    const fetchStats = async () => {\n      try {\n        const res = await fetch(`${API_URL}/api/sessions/stats`);\n        const data = await res.json();\n        setStats({\n          total_sessions: data.total_sessions || 0,\n          total_minutes: data.total_minutes || 0\n        });\n      } catch (err) {\n        setStats({ total_sessions: 0, total_minutes: 0 });\n      }\n    };\n    fetchStats();\n    interval = setInterval(() => {\n      fetchChargers();\n      fetchAllSessions();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Obtener sesiones filtradas por chargerName y connectorId\n  const fetchSessions = async (chargerName, connectorId) => {\n    setLoading(true);\n    try {\n      let url = `${API_URL}/api/sessions`;\n      const params = [];\n      if (chargerName) params.push(`chargerName=${encodeURIComponent(chargerName)}`);\n      if (connectorId) params.push(`connectorId=${encodeURIComponent(connectorId)}`);\n      if (params.length > 0) url += `?${params.join('&')}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      setSessions(data.sessions || []);\n      setError(null);\n    } catch (err) {\n      setError('Error al obtener las sesiones');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Cuando se selecciona un conector, obtener el historial real filtrado\n  useEffect(() => {\n    if (selectedConnectorId && selectedCharger) {\n      fetchSessions(selectedCharger.name, selectedConnectorId);\n    }\n  }, [selectedConnectorId, selectedCharger]);\n\n  useEffect(() => {\n    if (sessions.length > 0) {\n      console.log('Ejemplo de sesión:', sessions[0]);\n    }\n  }, [sessions]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <ConnectorStatusCards chargers={chargers} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}